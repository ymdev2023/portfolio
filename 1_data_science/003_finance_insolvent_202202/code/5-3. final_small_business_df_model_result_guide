{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"5-3. final_small_business_df_model_result_guide의 사본","provenance":[],"collapsed_sections":["2y4jaXhIMGBE","2dO15q--3u-N","YOhl0-w54Pz4","mjLGDTJ542YX","yiJ8PXYs7Kuz"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"aZ1IaJPSyyyP","executionInfo":{"status":"ok","timestamp":1639488913913,"user_tz":-540,"elapsed":18681,"user":{"displayName":"윤영주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18155336044487350880"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"19e71837-6868-42d9-bbb6-56b4d378f159"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","\n","# #이후 런타임 다시 시작"],"metadata":{"id":"_cusSCuQy7R0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639488929276,"user_tz":-540,"elapsed":12533,"user":{"displayName":"윤영주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18155336044487350880"}},"outputId":"d0d4114d-a93a-4292-bfac-3343b795f483"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 37 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 fonts-nanum all 20170925-1 [9,604 kB]\n","Fetched 9,604 kB in 1s (8,739 kB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 1.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 155222 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}]},{"cell_type":"code","source":["import warnings   \n","warnings.simplefilter(action='ignore', category=FutureWarning)\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.rc('font', family='NanumBarunGothic') \n","plt.rcParams[\"font.size\"] = 12\n","plt.rcParams['xtick.labelsize'] = 12.\n","plt.rcParams['ytick.labelsize'] = 12.\n","plt.rcParams['axes.unicode_minus'] = False"],"metadata":{"id":"oeSk7fkxzDAc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.metrics import  accuracy_score, precision_score, recall_score, f1_score"],"metadata":{"id":"J3MLCnnPzLKn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cd /content/drive/MyDrive/UBION_final_project/data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnDgPvopzNU6","executionInfo":{"status":"ok","timestamp":1639488939876,"user_tz":-540,"elapsed":8,"user":{"displayName":"윤영주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18155336044487350880"}},"outputId":"091e770f-6552-4694-e8f1-e1095583029d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/UBION_final_project/data\n"]}]},{"cell_type":"markdown","source":["# show_result, store_result"],"metadata":{"id":"Y68pehuf3rRY"}},{"cell_type":"code","source":["def show_result(y_test, prediction):\n","  global condition\n","  CM = confusion_matrix(y_test, prediction) #Confusion_matrix\n","  A = round( accuracy_score(y_test,prediction),3)  # 정확도\n","  P = round( precision_score(y_test, prediction),3)  #정밀도\n","  R = round( recall_score(y_test, prediction), 3) #재현율\n","  F = round( f1_score(y_test, prediction), 3) #f1-score\n","  \n","  condition.append(CM)\n","  condition.append(A)\n","  condition.append(P)\n","  condition.append(R)\n","  condition.append(F)"],"metadata":{"id":"C8TkkwYZ1MwQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# final_small_business_result = pd.DataFrame(columns = ['데이터프레임', 'train_test_split(Y/R)', 't-test(Y/N)', '변수선택법', 'VIF(Y/N)','sampling 방식', '적용모델','선택된 변수','혼동행렬', 'Accuracy', 'Precision', 'Recall', 'F1-score','hyperparameter 변경'])\n","# final_small_business_result.to_csv('final_small_business_result.csv', index=False)"],"metadata":{"id":"QNvnOrsVCl1G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def store_result(condition):\n","  final_small_business_result = pd.read_csv('final_small_business_result.csv')\n","\n","  condition= pd.DataFrame({len(final_small_business_result): condition}).transpose()\n","  condition.columns = ['데이터프레임', 'train_test_split(Y/R)', 't-test(Y/N)', '변수선택법', 'VIF(Y/N)','sampling 방식', '적용모델','선택된 변수','혼동행렬', 'Accuracy', 'Precision', 'Recall', 'F1-score','hyperparameter 변경']\n","  \n","  final_small_business_result = pd.concat([final_small_business_result, condition], axis=0)\n","\n","  final_small_business_result.to_csv('final_small_business_result.csv', index=False)"],"metadata":{"id":"9QhfhKFMLToD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# t-test"],"metadata":{"id":"2y4jaXhIMGBE"}},{"cell_type":"code","source":["def z_test(eq_var, nc, bc):\n","    from statsmodels.stats.weightstats import ztest\n","    sig_diff = []\n","\n","    for i in eq_var:\n","        ser_1 = nc[i]\n","        ser_2 = bc[i]\n","\n","        z_result = np.round(ztest(ser_1, ser_2)[1],3)\n","        if z_result < 0.01:\n","            sig_diff.append(i)\n","        else:\n","            pass\n","    return sig_diff"],"metadata":{"id":"ttxSmeETMH39"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def welch_t_test(neq_var,nc_,bc_):\n","    from scipy.stats import ttest_ind\n","\n","    sig_diff1 = []\n","\n","    for i in neq_var:\n","        ser_1 = nc_[i]\n","        ser_2 = bc_[i]\n","\n","        wt_result = np.round(ttest_ind(ser_1, ser_2, equal_var=False)[1],3)\n","        if wt_result < 0.01:\n","            sig_diff1.append(i)\n","        else:\n","            pass\n","    return sig_diff1"],"metadata":{"id":"ImssHcwzMH1r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def univariate_logit(X_train, y_train, Pvalue = 0.05 ,sig_val=[]):\n","    import statsmodels.api as sm\n","    import warnings\n","    \n","    sig_SL_i = []\n","    # sig_SL_p = []\n","    # sig_SL_c = []\n","    warnings.filterwarnings(\"ignore\")\n","    for i in sig_val:\n","        result_Logit = sm.Logit(y_train,sm.add_constant(X_train[i])).fit(disp=0)\n","        Pval = result_Logit.pvalues[1]\n","        coef = result_Logit.params[1]\n","\n","        if Pval < Pvalue:\n","            sig_SL_i.append(i)\n","            # sig_SL_p.append(Pval)\n","            # sig_SL_c.append(coef)\n","            \n","        else:\n","            pass\n","    \n","    # sig_df = pd.DataFrame(list(zip(sig_SL_i, sig_SL_p,sig_SL_c)), columns =['feature', 'Pvalue', 'coef'])\n","    \n","    # return sig_df\n","    return sig_SL_i"],"metadata":{"id":"Y5oNIipcMK3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_t_test(X_train, y_train):\n","    from scipy.stats import bartlett\n","    \n","    feature_list = X_train.columns.to_list()\n","    \n","    subset= X_train\n","    subset['차기부도여부'] = y_train\n","\n","    bc_df = subset[subset['차기부도여부']==1]\n","    nc_df = subset[subset['차기부도여부']==0]\n","\n","    #등분산, 이분산성 검정\n","    eq_var = []\n","    neq_var = []\n","    for i in subset.columns[:-1]:\n","        ser_1 = nc_df[i]\n","        ser_2 = bc_df[i]\n","\n","        lresult = np.round(bartlett(ser_1, ser_2)[1],3)\n","        if lresult < 0.05:\n","            eq_var.append(i) #등분산\n","        else:\n","            neq_var.append(i) #이분산\n","\n","    \n","    sig_diff = z_test(eq_var, nc_df, bc_df) #등분산 -> z_test\n","    sig_diff1 = welch_t_test(neq_var, nc_df, bc_df) #이분산 -> t_test\n","\n","    sig_val = sig_diff + sig_diff1\n","\n","    variable = univariate_logit(X_train, y_train, Pvalue=0.05, sig_val=sig_val)\n","\n","    return variable"],"metadata":{"id":"gzZkjQR8MLlJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Excute_model"],"metadata":{"id":"2dO15q--3u-N"}},{"cell_type":"markdown","source":["## basic"],"metadata":{"id":"LjXKikUG4EYN"}},{"cell_type":"code","source":["def Excute_lg (X_train, y_train, X_test, y_test):\n","  lr = LogisticRegression(random_state=0)\n","  \n","  lr.fit(X_train, y_train) \n","  prediction = lr.predict(X_test)\n","\n","  show_result(y_test, prediction)"],"metadata":{"id":"_H6fnitQ38KR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"RxSEkWEYn_TF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_sgd(X_train, y_train, X_test, y_test):\n","  sgd = SGDClassifier(random_state=0)\n","\n","  sgd.fit(X_train, y_train)\n","  prediction = sgd.predict(X_test)\n","  \n","  show_result(y_test, prediction)"],"metadata":{"id":"wdB8zbTo39Av"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_knn(X_train, y_train, X_test, y_test):\n","  knn = KNeighborsClassifier()\n","\n","  knn.fit(X_train, y_train)\n","  prediction = knn.predict(X_test)\n","\n","  show_result(y_test, prediction)"],"metadata":{"id":"wG2vKvzj3-Bg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_svm(X_train, y_train, X_test, y_test):\n","  svc = SVC(random_state=0)\n","\n","  svc.fit(X_train, y_train)\n","  prediction = svc.predict(X_test)\n","\n","  show_result(y_test, prediction)"],"metadata":{"id":"MBH73tUB1OlP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_dt(X_train, y_train, X_test, y_test):\n","  dt = DecisionTreeClassifier(random_state=0)\n","\n","  dt.fit(X_train, y_train)\n","  prediction = dt.predict(X_test)\n","\n","  show_result(y_test, prediction)"],"metadata":{"id":"QkZ9Az4e3_Sw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_rf(X_train, y_train, X_test, y_test):\n","  rfc = RandomForestClassifier(random_state=0)\n","\n","  rfc.fit(X_train, y_train)\n","  prediction = rfc.predict(X_test)\n","\n","  show_result(y_test, prediction)"],"metadata":{"id":"emC6Qo9Q4Bud"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_pr(X_train, y_train, X_test, y_test):\n","  dt2 = DecisionTreeClassifier(max_depth=2)\n","\n","  dt2.fit(X_train, y_train)\n","  prediction = dt2.predict(X_test)\n","  \n","  show_result(y_test, prediction)"],"metadata":{"id":"weM8Trep4A8F"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## change_cutoff"],"metadata":{"id":"eeD7MlyP4F9N"}},{"cell_type":"code","source":["def change_cutoff(result_df):\n","  value_00 = result_df[(result_df['actual']==0) & (result_df['prediction']== 0)]['부도_prob'].max()\n","  value_01 = result_df[(result_df['actual']==0) & (result_df['prediction']== 1)]['부도_prob'].min()\n","  value_10 = result_df[(result_df['actual']==1) & (result_df['prediction']== 0)]['부도_prob'].max()\n","  value_11 = result_df[(result_df['actual']==1) & (result_df['prediction']== 1)]['부도_prob'].min()\n","\n","  if value_10 < value_00:\n","    cutoff = value_11\n","    result_df.loc[(result_df['actual']==0) & (result_df['prediction']== 1) & (result_df['부도_prob']<cutoff) , 'prediction'] = 0\n","  \n","  if value_11 > value_01:\n","    cutoff= value_00\n","    result_df.loc[(result_df['actual']==1) & (result_df['prediction']== 0) & (result_df['부도_prob']>cutoff) , 'prediction'] = 1\n","\n","  return result_df"],"metadata":{"id":"WmHF7Usl6Jkd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_lg_change_cutoff (X_train, y_train, X_test, y_test):\n","  lr = LogisticRegression(random_state=0, probability=True)\n","  lr.fit(X_train, y_train) \n","  prediction = lr.predict(X_test)\n","  prediction_prob =lr.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"bQAn7jUE4Iv-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_sgd_change_cutoff(X_train, y_train, X_test, y_test):\n","  sgd = SGDClassifier(random_state=0)\n","  sgd.fit(X_train, y_train)\n","  prediction = sgd.predict(X_test)\n","  prediction_prob =sgd.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"zA-DIrht4Jod"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_svm_change_cutoff(X_train, y_train, X_test, y_test):\n","  svc = SVC(random_state=0, probability=True)\n","  svc.fit(X_train, y_train)\n","  prediction = svc.predict(X_test)\n","  prediction_prob =svc.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"A7MWqRit4KjB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_pr_change_cutoff(X_train, y_train, X_test, y_test):\n","  dt2 = DecisionTreeClassifier(max_depth=2)\n","  dt2.fit(X_train, y_train)\n","  prediction = dt2.predict(X_test)\n","  prediction_prob =dt2.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"f1pcf28S4Nds"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_dt_change_cutoff(X_train, y_train, X_test, y_test):\n","  dt = DecisionTreeClassifier(random_state=0)\n","  dt.fit(X_train, y_train)\n","  prediction = dt.predict(X_test)\n","  prediction_prob =dt.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"ZgBTbJiM4Moy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_knn_change_cutoff(X_train, y_train, X_test, y_test):\n","  knn = KNeighborsClassifier()\n","  knn.fit(X_train, y_train)\n","  prediction = knn.predict(X_test)\n","  prediction_prob =knn.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"DmXbuMaa4L0F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Excute_rf_change_cutoff(X_train, y_train, X_test, y_test):\n","  rfc = RandomForestClassifier(random_state=0)\n","  rfc.fit(X_train, y_train)\n","  prediction = rfc.predict(X_test)\n","  prediction_prob =rfc.predict_proba(X_test)\n","\n","  result_df = pd.DataFrame(prediction_prob, columns=['정상_prob','부도_prob'])\n","  result_df['actual'] = y_test\n","  result_df['prediction'] = prediction\n","\n","  return_df = change_cutoff(result_df)\n","  show_result(result_df['actual'], result_df['prediction'])"],"metadata":{"id":"iHTjQJvT4PEW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# sampling"],"metadata":{"id":"YOhl0-w54Pz4"}},{"cell_type":"code","source":["def RUSE(X_train, y_train):\n","  from imblearn.under_sampling import RandomUnderSampler\n","  rus = RandomUnderSampler()\n","  \n","  X_undersampled, y_undersampled = rus.fit_resample(X_train, y_train)\n","  \n","  return X_undersampled, y_undersampled"],"metadata":{"id":"NVuJddau1phF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def ROSE(X_train, y_train):\n","  from imblearn.over_sampling import RandomOverSampler\n","  ros = RandomOverSampler()\n","\n","  X_oversampled, y_oversampled = ros.fit_resample(X_train, y_train)\n","  \n","  return X_oversampled, y_oversampled"],"metadata":{"id":"TQD36bk84s65"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def SMOTE(X_train, y_train):\n","  from imblearn.over_sampling import SMOTE\n","  smote = SMOTE()\n","  X_smoted, y_smoted = smote.fit_resample(X_train,y_train)\n","  \n","  return X_smoted, y_smoted"],"metadata":{"id":"FV4vTutZ4UTC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# feature_selection"],"metadata":{"id":"mjLGDTJ542YX"}},{"cell_type":"code","source":["def forward_feature_selection(X_train, y_train, variables):\n","    import statsmodels.api as sm\n","    y = y_train ## 반응 변수\n","    selected_variables = [] ## 선택된 변수들\n","    sl_enter = 0.05\n","    sv_per_step = [] ## 각 스텝별로 선택된 변수들\n","    while len(variables) > 0:\n","        remainder = list(set(variables) - set(selected_variables))\n","        pval = pd.Series(index=remainder) ## 변수의 p-value\n","        ## 기존에 포함된 변수와 새로운 변수 하나씩 돌아가면서 \n","        ## 선형 모형을 적합한다.\n","        for col in remainder: \n","            X = X_train[selected_variables+[col]]\n","            X = sm.add_constant(X)\n","            model = sm.Logit(y,X).fit(disp=0)\n","            pval[col] = model.pvalues[col]\n","        min_pval = pval.min()\n","        if min_pval < sl_enter: ## 최소 p-value 값이 기준 값보다 작으면 포함\n","            selected_variables.append(pval.idxmin())\n","            sv_per_step.append(selected_variables.copy())\n","        else:\n","            break\n","    return selected_variables"],"metadata":{"id":"y9RSdlo45pkA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def backward_feature_selection(X_train, y_train,variables):\n","    import statsmodels.api as sm\n","    y = y_train ## 반응 변수\n","    selected_variables = variables ## 초기에는 모든 변수가 선택된 상태\n","    sl_remove = 0.05\n","    sv_per_step = [] ## 각 스텝별로 선택된 변수들\n","    while len(selected_variables) > 0:\n","        X = sm.add_constant(X_train[selected_variables])\n","        p_vals = sm.Logit(y,X).fit(disp=0).pvalues[1:] ## 절편항의 p-value는 뺀다\n","        max_pval = p_vals.max() ## 최대 p-value\n","        if max_pval >= sl_remove: ## 최대 p-value값이 기준값보다 크거나 같으면 제외\n","            remove_variable = p_vals.idxmax()\n","            selected_variables.remove(remove_variable)\n","            sv_per_step.append(selected_variables.copy())\n","        else:\n","            break\n","    return selected_variables"],"metadata":{"id":"Q-2RPpuI6IE0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def stepwise_feature_selection(X_train, y_train, variables):\n","    import statsmodels.api as sm\n","    y = y_train ## 반응 변수\n","    selected_variables = [] ## 선택된 변수들\n","    sl_enter = 0.05\n","    sl_remove = 0.05\n","    sv_per_step = [] ## 각 스텝별로 선택된 변수들\n","    while len(variables) > 0:\n","        remainder = list(set(variables) - set(selected_variables))\n","        pval = pd.Series(index=remainder) ## 변수의 p-value\n","        ## 기존에 포함된 변수와 새로운 변수 하나씩 돌아가면서 \n","        ## 선형 모형을 적합한다.\n","        for col in remainder: \n","            X = X_train[selected_variables+[col]]\n","            X = sm.add_constant(X)\n","            model = sm.Logit(y,X).fit(disp=0)\n","            pval[col] = model.pvalues[col]\n","    \n","        min_pval = pval.min()\n","        if min_pval < sl_enter: ## 최소 p-value 값이 기준 값보다 작으면 포함\n","            selected_variables.append(pval.idxmin())\n","            ## 선택된 변수들에대해서\n","            ## 어떤 변수를 제거할지 고른다.\n","            while len(selected_variables) > 0:\n","                selected_X = X_train[selected_variables]\n","                selected_X = sm.add_constant(selected_X)\n","                selected_pval = sm.Logit(y,selected_X).fit(disp=0).pvalues[1:] ## 절편항의 p-value는 뺀다\n","                max_pval = selected_pval.max()\n","                if max_pval >= sl_remove: ## 최대 p-value값이 기준값보다 크거나 같으면 제외\n","                    remove_variable = selected_pval.idxmax()\n","                    selected_variables.remove(remove_variable)\n","                else:\n","                    break\n","            sv_per_step.append(selected_variables.copy())\n","        else:\n","            break\n","    return selected_variables"],"metadata":{"id":"rt2YFiaU41kU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def filter_vif(X_train, variables):\n","    from patsy import dmatrices\n","    import statsmodels.api as sm\n","    from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","    vif = pd.DataFrame()\n","    vif['VIF'] = [variance_inflation_factor(X_train[variables].values, i) for i in range(X_train[variables].shape[1])]\n","    vif['feature'] = X_train[variables].columns\n","    \n","    non_vif_features = vif.loc[vif['VIF'] <= 10]['feature']\n","    return non_vif_features"],"metadata":{"id":"k9d5FNUS2v-I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# train/test/split"],"metadata":{"id":"yiJ8PXYs7Kuz"}},{"cell_type":"code","source":["def split_by_Y(df):\n","    after_2018  = df.loc[df['회계년도'] >= 2018]['차기부도여부'].value_counts()[1]\n","    before_2018 = df.loc[df['회계년도'] <  2018]['차기부도여부'].value_counts()[1]\n","    SIZE = after_2018/len(df)\n","\n","    test = df[df['회계년도'] >= 2018]\n","    train = df[df['회계년도'] < 2018]\n","    \n","    test.drop(columns = ['회계년도','회사명', '거래소코드','산업대분류'], inplace=True)\n","    train.drop(columns= ['회계년도','회사명', '거래소코드','산업대분류'], inplace=True)\n","\n","    X_train = train.drop(['차기부도여부'], axis= 1)\n","    y_train = train['차기부도여부']\n","\n","    X_test = test.drop(['차기부도여부'], axis=1)\n","    y_test = test['차기부도여부']\n","\n","    return X_train, y_train, X_test, y_test"],"metadata":{"id":"ixCdDM1e7IUH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def split_by_R(df):\n","    from sklearn.model_selection import train_test_split\n","    \n","    data = df.drop(['차기부도여부'], axis= 1)\n","    target = df['차기부도여부']\n","\n","    # train_test_split\n","    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.178, shuffle=True, stratify=target, random_state=34)\n","    X_test.drop(columns = ['회계년도','회사명', '거래소코드','산업대분류'], inplace=True)\n","    X_train.drop(columns= ['회계년도','회사명', '거래소코드','산업대분류'], inplace=True)\n","\n","    return X_train, y_train, X_test, y_test"],"metadata":{"id":"fHDsNqfV7u4_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# main"],"metadata":{"id":"Mv3xeqWA-RCO"}},{"cell_type":"code","source":["def RUN_ALL(filename, train_test_split_method, tt, feature_selection_method, vv, sampling_method, model_name):\n","    df = pd.read_csv(filename+'.csv')\n","    global condition\n","\n","    if train_test_split_method == 'Y' :\n","        X_train, y_train, X_test, y_test = split_by_Y(df)\n","    elif train_test_split_method == 'R' :\n","        X_train, y_train, X_test, y_test = split_by_R(df)\n","\n","    if tt =='t_Y':\n","        variable = Excute_t_test(X_train, y_train)\n","    elif tt =='t_N':\n","        variable = X_train.columns.tolist()\n","\n","    try: #에러가 발생될 지도 모르는 코드\n","        if feature_selection_method == 'forward':\n","            selected_variables_list = forward_feature_selection(X_train, y_train, variable)\n","        elif feature_selection_method == 'backward':\n","            selected_variables_list = backward_feature_selection(X_train, y_train, variable)\n","        elif feature_selection_method == 'stepwise':\n","            selected_variables_list = stepwise_feature_selection(X_train, y_train, variable)\n","        elif feature_selection_method == 'None':\n","            selected_variables_list = variable\n","\n","    except: #에러가 나면 try 내의 구문대신 실행될 구문\n","        selected_variables_list = variable\n","        condition[3]= 'error'\n","\n","    finally: #에러 유무와 상관없이 실행될 구문\n","        if vv =='v_Y':\n","            selected_variables_list = filter_vif(X_train, selected_variables_list)\n","            condition.append(selected_variables_list.tolist())\n","        elif vv =='v_N':\n","            condition.append(selected_variables_list)\n","\n","        X_train = X_train[selected_variables_list]\n","        X_test = X_test[selected_variables_list]\n","\n","        if sampling_method == 'RUSE' :\n","            sampled_X_train, sampled_y_train = RUSE( X_train, y_train )\n","        elif sampling_method =='ROSE' :\n","            sampled_X_train, sampled_y_train = ROSE( X_train, y_train )\n","        elif sampling_method =='SMOTE' :\n","            sampled_X_train, sampled_y_train = SMOTE( X_train, y_train)\n","        elif sampling_method =='None':\n","            sampled_X_train, sampled_y_train = X_train, y_train\n","\n","\n","        if model_name =='lg':\n","            Excute_lg(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='sgd':\n","            Excute_sgd(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='knn':\n","            Excute_knn(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='svm':\n","            Excute_svm(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='dt':\n","            Excute_dt(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='pr':\n","            Excute_pr(sampled_X_train, sampled_y_train, X_test, y_test)\n","        elif model_name =='rf':\n","            Excute_rf(sampled_X_train, sampled_y_train, X_test, y_test)\n","    "],"metadata":{"id":"c1WpZyfk6pvO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for df in ['small_business_df']:\n","    for split in ['R']:\n","        for tt in ['t_Y']:\n","            for fs in ['backward','forward','stepwise','None']:\n","                for vv in ['v_N','v_Y']:\n","                    for sm in ['RUSE','ROSE','SMOTE','None']:\n","                        for m in ['lg','sgd','knn','svm','dt','pr','rf']:\n","                            condition = [df, split, tt, fs, vv, sm, m]\n","                            print(\"***\", condition)\n","                            RUN_ALL(condition[0], condition[1], condition[2], condition[3], condition[4], condition[5], condition[6])\n","                            condition.append('none') # parameter 조정 X\n","                            store_result(condition)"],"metadata":{"id":"jK6pS07fRPRr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639493316411,"user_tz":-540,"elapsed":4348931,"user":{"displayName":"윤영주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"18155336044487350880"}},"outputId":"8ebd411f-8222-4a94-b6cd-3c176c9ce16d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'lg']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/scipy/stats/morestats.py:2241: RuntimeWarning: divide by zero encountered in log\n","  numer = (Ntot*1.0 - k) * log(spsq) - np.sum((Ni - 1.0)*log(ssq), axis=0)\n"]},{"output_type":"stream","name":"stdout","text":["*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_N', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'backward', 'v_Y', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_N', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'forward', 'v_Y', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_N', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'stepwise', 'v_Y', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_N', 'None', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'RUSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'ROSE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'SMOTE', 'rf']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'lg']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'sgd']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'knn']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'svm']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'dt']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'pr']\n","*** ['small_business_df', 'R', 't_Y', 'None', 'v_Y', 'None', 'rf']\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"XAfVBp8sKFAU"},"execution_count":null,"outputs":[]}]}